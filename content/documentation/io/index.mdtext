Title: Reading RDF in Jena

This page details the setup of RDF I/O technology (RIOT) introduced in Jena 2.10.

The output capabilities are described [elsewhere](rdf-output.html).

- [Formats](#formats)
- [Commands](#command-line-tools)
- [Inference](#inference)
- [API](#api)
  - [Determining the RDF syntax](#determining-the-rdf-syntax)
  - [Common usage](#example-1-common-usage)
  - [Using the RDFDataMgr](##example-2-using-the-rdfdatamgr)
- [Logging](#logging)
- [The StreamManager and LocationMapper](#streammanager-and-locationmapper)
  - [Configuring the `StreamManager`](#configuring-a-streammanager)
  - [Configuring a `LocationMapper`](#configuring-a-locationmapper)
- [Add a new language](#add-a-new-language)
- [Advanced examples](#advanced-examples)

Full details of operations are given in the javadoc.

## Formats

The following RDF formats are supported by Jena. In addition, other syntaxes
can be integrated into the parser framework.

- RDF/XML
- Turtle
- N-Triples
- RDF/JSON
- TriG
- N-Quads

RDF/JSON is not JSON-LD - it is a direct encoding of RDF triples in JSON.
See the [description of RDF/JSON](rdf-json.html).

See also the [RDF/XML specific documentation](arp.html) for configuration
of the RDF/XML parser.

## Command line tools

There are scripts in Jena download to run these commands.

- `riot` - parse, guessing the syntax from the file extension.
    Assumed N-Quads/N-Triples from stdin.
- `turtle`, `ntriples`, `nquads`, `trig`, `rdfxml` - parse a particular language

These can be called directly as Java programs:

The file extensions are:

| Extension  | Language |
|-----------|-----------|
| `.nt`     | N-triples |
| `.ttl`    | Turtle    |
| `.nq`     | N-Quads   |
| `.trig`   | TriG      |
| `.rdf`    | RDF/XML   |
\ `.owl`    | RDF/XML   |

In addition, if the extension is .gz the file is assumed to be gzip
compressed. The file name is examined for an inner extension. For
example, `.nt.gz` is gzip compressed N-Triples.

These scripts call java programs in the `riotcmd` package. For example:

    java -cp ... riotcmd.riot file.ttl

The scripts all accept the same arguments (type "riot --help" to
get command line reminders):

-   `--validate`: Checking mode: same as --strict --sink --check=true
-   `--check=true/false`: Run with checking of literals and IRIs either on or off.
-   `--sink`: No output of triples or quads.
-   `--time`: Output timing information.

To aid in checking for errors in UTF8-encoded files, there is a
utility which reads a file of bytes as UTF8 and checks the encoding.

-   `utf8` -- read bytes as UTF8

## Inference

RIOT support creation of inferred triples during the parsing
process:

    riotcmd.infer --rdfs VOCAB FILE FILE ...

Output will contain the base data and triples inferred based on
subclass, subproperty, domain and range.

## API

Much of the functionality is accessed via the Jena Model API; direct
calling of the RIOT subsystem isn't needed.  A resource name
with no URI scheme is assumed to be a local file name.

Applications typically use at most `RDFDataMgr` to read RDF datasets.

The major classes in the RIOT API are:

| Class | Comment |
|-------|---------|
| RDFDataMgr        | Main set of functions to read and load models and datasets |
| StreamManager     | Handles the opening of types input streams |
| StreamRDF         | Interface for the output of all parsers |
| RDFLanguages      | Registered languages |
| RDFParserRegistry | Registered parser factories |

### Determining the RDF syntax

The syntax of the RDF file is determined by the content type (if an HTTP
request), then the file extension if there is no content type (or it's
`text/plain`), which is assumed to be type returned for an unconfigured
http server. The application can also pass in a declared language hint.

The following is a suggested Apache httpd .htaccess file:

    AddType  text/turtle             .ttl
    AddType  application/rdf+xml     .rdf
    AddType  application/n-triples   .nt

    AddType  application/ld+json     .jsonld
    AddType  application/owl+xml     .owl

    AddType  text/trig               .trig
    AddType  application/n-quads     .nq

### Example 1 : Common usage

In this example, a file in the current directory is read as Turtle.

  Model model = ModelFactory.createDefaultModel() ;
  model.read("data.ttl") ;

If the syntax is not as the file extension, a language can be declared:

    model.read("data.foo", "TURTLE") ;

### Example 2 : Using the RDFDataMgr

In versions of Jena priot to 2.10.0, the `FileManager` provided some of
this functionality. It was more basic, and not properly web enabled.  The
`RDFDataMgr` superceeds the `FileManager`.  "load*" operations create an
in-memory container (model, or dataset as appropriate); "read" operations
add data into an existing model or dataset.

    // Create a model and read into it from file 
    // "data.ttl" assumed to be Turtle.
    Model model = RDFDataMgr.loadModel("data.ttl") ;

    // Create a dataset and read into it from file 
    // "data.trig" assumed to be TriG.
    Dataset dataset = RDFDataMgr.loadDataset("data.trig") ;

    // Read into an existing Model
    RDFDataMgr.read(model, "data2.ttl") ;

## Logging

The parsers log to a logger called `org.aapche.jena.riot`.  To avoid `WARN`
messages, set this in log4j.properties to `ERROR`.

## StreamManager and LocationMapper
    
By default, the `RDFDataMgr` uses the global `StreamManager` to open typed
InputStreams.  This is available to applications via `RDFDataMgr.open` as well as directly
using a `StreamManager`.

The `StreamManager` is choosen based on the `Context` object for the
oepration, but normally this defaults to the global `Context` availbale vai
`Context.get()`.  The constant `RDFDataMgr.streamManagerSymbol`, which is 
`http://jena.apache.org/riot/streamManager` is used.

Specialized StreamManagers can be configured with specific locators for
data:

-   File locator (with own current directory)
-   URL locator
-   Class loader locator
-   Zip file locator

### Configuring a `StreamManager`

The `StreamManager` can be reconfigured with different places to look for
files.  The default configuration used for the global `StreamManager` is
a file access class, wihere the current directory is that of the java
process, a URL accessor for reading from the web, and a
class laoder-based accessor.  Different setups can be built and used
either as the global set up, 

There is also a `LocationMapper` for rewiting file names and URLs before
use to allow placing known names in different places (e.g. having local
copies of import http resources).

### Configuring a `LocationMapper`

Location mapping files are RDF, usually written in Turtle although
an RDF syntax can be used.

    @prefix lm: <http://jena.hpl.hp.com/2004/08/location-mapping#>

    [] lm:mapping
       [ lm:name "file:foo.n3" ;     lm:altName "file:etc/foo.n3" ] ,
       [ lm:prefix "file:etc/" ;     lm:altPrefix "file:ETC/" ] ,
       [ lm:name "file:etc/foo.n3" ; lm:altName "file:DIR/foo.n3" ]
       .

There are two types of location mapping: exact match renaming and
prefix renaming. When trying to find an alternative location, a
`LocationMapper` first tries for an exact match; if none is found,
the LocationMapper will search for the longest matching prefix. If
two are the same length, there is no guarantee on order tried;
there is no implied order in a location mapper configuration file
(it sets up two hash tables).

In the example above, `file:etc/foo.n3` becomes `file:DIR/foo.n3`
because that is an exact match. The prefix match of file:/etc/ is
ignored.

All string tests are done case sensitively because the primary use
is for URLs.

Notes:

-   Property values are not URIs, but strings. This is a system
    feature, not an RDF feature. Prefix mapping is name rewriting;
    alternate names are not treated as equivalent resources in the rest
    of Jena. While application writers are encouraged to use URIs to
    identify files, this is not always possible.
-   There is no check to see if the alternative system resource is
    equivalent to the original.

A LocationMapper finds its configuration file by looking for the
following files, in order:

-   `file:location-mapping.rdf`
-   `file:location-mapping.ttl`
-   `file:etc/location-mapping.rdf`
-   `file:etc/location-mapping.ttl`

This is a specified as a path - note the path separator is always
the character ';' regardless of operating system because URLs
contain ':'.

Applications can also set mappings programmatically. No
configuration file is necessary.

The base URI for reading models will be the original URI, not the alternative location.

### Debugging

Using log4j, set the logging level of the classes:

* org.apache.jena.riot.stream.StreamManager
* org.apache.jena.riot.stream.LocationMapper

## Advanced examples

### Filter the output of parsing.

When working with very large files, it can be useful to process the stream of triples or quads produced
by the parser so as to work in a streaming fashion.

See [RIOT example 4](https://svn.apache.org/repos/asf/jena/trunk/jena-arq/src-examples/arq/examples/riot/ExRIOT_4.java)

### Add a new language

The set of languages is fixed - a new languages can be added to RIOT as shown in
[RIOT example 5](https://svn.apache.org/repos/asf/jena/trunk/jena-arq/src-examples/arq/examples/riot/ExRIOT_5.java)


