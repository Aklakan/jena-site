Title: TDB FAQs

## FAQs

-   [Does TDB support Transactions?](#transactions)
-   [Can I share a TDB dataset between multiple applications?](#multi-jvm)
-   [What is the "Impossibly Large Object" exception?](#impossibly-large-object)
-   [Does Fuseki/TDB have a memory leak?](#fuseki-tdb-memory-leak)

<a name="transactions"></a>
## Does TDB support transactions?

Yes, TDB provides
[Serializable](http://en.wikipedia.org/wiki/Isolation_(database_systems)#SERIALIZABLE)
transactions, the highest
[isolation level](http://en.wikipedia.org/wiki/Isolation_(database_systems)).

Using transactions is **strongly** recommended as they help prevent data corruption 
from unexpected process termination and system crashes as well as data corruption that
can otherwise occur from non-transactional use of TDB.

Please see the [transactions](tdb_transactions.html) documentation for how to use TDB
transactionally.

<a name="multi-jvm"></a>
## Can I share a TDB dataset between multiple applications?

Multiple applications, running in multiple JVMs, using the same
file databases is **not** supported and has a high risk of data corruption.  Once corrupted a database cannot be repaired
and must be rebuilt from the original source data. Therefore there **must** be a single JVM
controlling the database directory and files.

If you wish to share a TDB dataset between applications use our [Fuseki](../serving_data/) component which provides a 
database server. Fuseki supports [SPARQL Query](http://www.w3.org/TR/sparql11-query/),
[SPARQL Update](http://www.w3.org/TR/sparql11-update/) and the [SPARQL Graph Store protocol](http://www.w3.org/TR/sparql11-http-rdf-update/).
Applications should be written in terms of these protocols using the relevant Jena APIs, this has the added benefit of making your
applications portable to another SPARQL backend should you ever need to.

<a name="impossibly-large-object"></a>
## What is the "Impossibly Large Object" exception?

The "Impossibly Large Object" exception is an exception that occurs when part of your TDB dataset has become corrupted.  It may
only affect a small section of your dataset so may only occur intermittently depending on your queries.  A query that touches
the entirety of the dataset will always experience this exception e.g.

    SELECT * WHERE { { ?s ?p ?o } UNION { GRAPH ?g { ?s ?p ?o } } }

The corruption may have happened at any time in the past and once it has happened there
is no way to repair it.  Corrupted datasets will need to be rebuilt from the original source data, this is why we **strongly**
recommend you use [transactions](tdb_transactions.html) since this protects your dataset against corruption.

<a name="fuseki-tdb-memory-leak"></a>
## Does Fuseki/TDB have a memory leak?

A number of users have reported a suspected memory leak when using Fuseki/TDB when it used to serve a database that has continuous high
load with a mixture of queries and updates.  Having investigate the problem this is not a memory leak per-se rather a limitation of how
[transactions](tdb_transactions.html) are implemented for TDB.

TDB uses write-ahead logging so new data is written both to an on-disk journal and kept in-memory.  This is necessary because TDB permits
a single writer and multiple readers at any one time and readers are guaranteed to always see the state of the database at the time they
started reading.  Therefore until there are no active readers it is not possible to update the database directly since readers are actively
accessing it hence why a journal is used.  The in-memory journal holds some memory that cannot be freed up until such time as the database
has no active readers/writers and the changes it holds can be safely flushed to disk.

This means that in scenarios where there is continuous high load on the system TDB never reaches a state where it is able to flush the journal
eventually causing out of memory errors in Fuseki.  You can see if you are experiencing this issue by examining your database directory, if it
contains a `.jrnl` file that is non-empty then Fuseki/TDB is having to hold the journal in-memory.

**However** because this relates to transactional use and the journal is also stored on disk no data will be lost, by stopping and restarting 
Fuseki the journal will be flushed to disk.