Title: Jena JDBC Drivers

Jena JDBC comes with tree built in drivers by default with the option of building
[custom drivers](custom_driver.html) if desired.  This page covers the differences
between the provided drivers and the connection URL options for each.

## Connection URL Basics

Connection URLs for Jena JDBC drivers have a common format, they all start with the following:

    jdbc:jena:foo:

Where `foo` is a driver specific prefix that indicates which specific driver implementation
is being used.

After the prefix the connection URL consists of a sequence of key
value pairs, the characters ampersand (`&`), semicolon (`;`) and
pipe (`|`) are considered to be separators between pairs, the
separators are reserved characters and may not be used in values. The key is
separated from the value by a equals sign (`=`) though unlike the
separators this is not a reserved character in values.

There is no notion of character escaping in connection parameters so if you
need to use any of the reserved characters in your values then you should
pass these to the `connect(String, Properties)` method directly in the
`Properties` object.

### Common Parameters

There are some common parameter understood by all Jena JDBC drivers and which
apply regardless of driver implementation.

### JDBC Compatibility Level

As discussed in the [overview](index.html#treatment-of-results) the drivers have a notion
of JDBC compatibility which is configurable. The `jdbc-compatibility` parameter is used 
in connection URLs. To avoid typos when creating URLs programmatically a constant 
(`JenaDriver.PARAM_JDBC_COMPATIBILITY`) is provided which contains the parameter
name exactly as the code expects it. This parameter provides an integer value
in the range 1-9 which denotes how compatible the driver should attempt to
be.  See the aforementioned overview documentation for more information on the interpretation
of this parameter.

When not set the default compatibility level is
used, note that `JenaConnection` objects support changing this after
the connection has been established.

### Pre-Processors

The second of the common parameters is the `pre-processor` parameter which is used to
specify one/more `CommandPreProcessor` implementations to use. The
parameter should be specified once for each pre-processor you wish to you and
you should supply a fully qualified class name to ensure the pre-processor
can be loaded and registered on your connections. The driver will report an
error if you specify a class that cannot be appropriately loaded and
registered.

Pre-processors are registered in the order that they are specified so if you
use multiple pre-processors and they have ordering dependencies please ensure
that you specify them in the desired order. Note that `JenaConnection`
objects support changing registered pre-processors after the connection has
been established.

### Post-Processors

There is also a `post-processor` parameter which is used to specify
one/more `ResultsPostProcessor` implementations to use. The parameter
should be specified once for each post-processor you wish to use and you
should supply a fully qualified class name to ensure the post-processor can
be loaded and registered on your connections. The driver will report an error
is you specify a class that cannot be appropriately loaded and registered.

Post-processors are registered in the order that they are specified so if you
use multiple post-processors and they have ordering dependencies please
ensure that you specify them in the desired order. Note that
`JenaConnection` objects support changing registered post-processors
after the connection has been established.

## Available Drivers

- [In-Memory](#in-memory)
- [TDB](#tdb)
- [Remote Endpoint](#remote-endpoint)

### In-Memory

The in-memory driver provides access to a non-persistent memory dataset.  This dataset
may either be initially empty or may be initialized from an input file.  Remember that
this is non-persistent so even if the latter option is chosen changes are not persisted
to the input file.  This driver is primarily intended for testing and demonstration
purposes.

### TDB

### Remote Endpoint