Title: Using Jena with Apache Maven

[Apache Maven](http://maven.apache.org) is a tool to help Java projects manage
their dependencies on library code, such as Jena. By declaring a dependency on
the core of Jena in your project's <code>pom.xml</code> file, you will get the
consistent set of library files that Jena depends on automatically added too.

This page assumes you have Maven installed on your computer. If this is not the case,
please read and follow [these instructions](http://maven.apache.org/download.html#Installation).

### Repositories

Released maven artifacts are mirrored to the central maven repositories.
This can take a few days.

The Jena repositories at Apache are:

 * [https://repository.apache.org/content/repositories/releases/](https://repository.apache.org/content/repositories/releases/) for released versions
 * [https://repository.apache.org/content/repositories/snapshots/](https://repository.apache.org/content/repositories/snapshots/) for development builds.

Stable Jena releases are automatically mirrored by the central Maven
repositories, so there will normally be no need to add any extra
repositories to your <code>pom.xml</code> or <code>settings.xml</code>.

### Specifying Jena as a dependency

This is how to specify in your pom.xml file the dependency
on a version of Jena:

      <dependency>
        <groupId>org.apache.jena</groupId>
        <artifactId>apache-jena-libs</artifactId>
        <type>pom</type>
        <version>X.Y.Z</version>
      </dependency>

This will transitively resolve all the dependencies for you: `jena-core`,
`jena-arq`, `jena-tdb` and `jena-iri` and their dependencies.  

Note the use of `<type>pom</type>` above.  This does not work
in all tools. An alternative is to depend on `jena-tdb`, which will pull
in the other artifacts.

      <dependency>
        <groupId>org.apache.jena</groupId>
        <artifactId>jena-tdb</artifactId>
        <version>a.b.c</version>
      </dependency>

The version number needs to be checked - it is not the same as apache-jena.

Other modules need to be added separately, for example:

      <dependency>
        <groupId>org.apache.jena</groupId>
        <artifactId>jena-sdb</artifactId>
        <version>x.y.z</version>
      </dependency>

Please check for the latest versions.

The full list of artifacts is:

<table>
  <tr><th>Artifact ID</th><th>Name</th><th>Packaging</th><th>Description</th></tr>
   <!-- START OF ARTIFACT LIST --> 
    
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena</td><td>Apache Jena</td><td>pom</td><td/></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-arq</td><td>Apache Jena - ARQ (SPARQL 1.1 Query Engine)</td><td>jar</td><td>ARQ is a SPARQL 1.1 query engine for Apache Jena</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-examples</td><td>Apache Jena - Code Examples</td><td>jar</td><td>A collection of example code illustrating uses of Apache Jena</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-core</td><td>Apache Jena - Core</td><td>jar</td><td>Jena is a Java framework for building Semantic Web applications. It provides a programmatic environment for RDF, RDFS and OWL, SPARQL and includes a rule-based inference engine.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-csv</td><td>Apache Jena - Data Tables for RDF and SPARQL</td><td>jar</td><td>jena-csv is for getting CSVs into a form that is amenable to Jena SPARQL processing, and doing so in a way that is not specific to CSV files. It includes getting the right architecture in place for regular table shaped data, using the core abstraction of PropertyTable.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>apache-jena</td><td>Apache Jena - Distribution</td><td>pom</td><td>     Apache Jena is a API and toolkit for working with semantic web technologies such as RDF and SPARQL using Java.  This artifact represents the source and binary distribution packages generated for releases.   </td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-elephas</td><td>Apache Jena - Elephas</td><td>pom</td><td>A collection of tools for working with RDF on the Hadoop platform</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-elephas-common</td><td>Apache Jena - Elephas - Common API</td><td/><td>Common code for RDF on Hadoop such as writable types for RDF primitives</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-elephas-io</td><td>Apache Jena - Elephas - I/O</td><td/><td>RDF Input/Output formats library for Hadoop</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-elephas-mapreduce</td><td>Apache Jena - Elephas - Map/Reduce</td><td/><td>Contains some basic Map/Reduce implementations for working with RDF on Hadoop</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-elephas-stats</td><td>Apache Jena - Elephas - Statistics Demo App</td><td/><td>A demo application that can be run on Hadoop to produce a statistical analysis on arbitrary RDF inputs</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-extras</td><td>Apache Jena - Extras</td><td>pom</td><td>Extra packages for Jena development. This is the parent module for the Jena Extra modules.   	These modules provide utiliities and larger packages that make Apache Jena development or usage  	easier but that do not fall within the standard Jena framework.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-querybuilder</td><td>Apache Jena - Extras - Query Builder</td><td/><td>A utility package to simplify the building of ARQ queries in code.  Provides both a simple builder interface for queries as well as simple prepared statement processing.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-fuseki</td><td>Apache Jena - Fuseki</td><td>pom</td><td>Apache Jena Fuseki</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-fuseki</td><td>Apache Jena - Fuseki1 (SPARQL 1.1 Server)</td><td>jar</td><td>Fuseki is a SPARQL 1.1 Server which provides query, update and graph store protocol endpoints that can be used to expose triple store(s) over HTTP</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>apache-jena-fuseki</td><td>Apache Jena - Fuseki Binary Distribution</td><td>pom</td><td>Fuseki distribution</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-fuseki-core</td><td>Apache Jena - Fuseki Server Engine</td><td>jar</td><td>Fuseki is a SPARQL 1.1 Server which provides query, update and graph store protocol endpoints that can be used to expose triple stores over HTTP</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-fuseki-server</td><td>Apache Jena - Fuseki Server Standalone Jar</td><td>jar</td><td>Fuseki server - combined jar with built-in webserver.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-fuseki-war</td><td>Apache Jena - Fuseki WAR File</td><td>war</td><td>WAR file for Fuseki</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-iri</td><td>Apache Jena - IRI</td><td>jar</td><td>     The IRI module provides an implementation of the IRI and URI specifications (RFC 3987 and 3986) which are used across Jena in order to comply with relevant W3C specifications for RDF and SPARQL which require conformance to these specifications.   </td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-jdbc-core</td><td>Apache Jena - JDBC Core API</td><td/><td>This library provides core functionality for Jena JDBC</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-jdbc-driver-bundle</td><td>Apache Jena - JDBC Driver Bundle</td><td/><td>An artifact which bundles up the standard Jena JDBC drivers into a single shaded JAR file to provide a convenience dependency</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-jdbc-driver-mem</td><td>Apache Jena - JDBC In-Memory Driver</td><td/><td>A Jena JDBC driver that uses an ARQ in-memory endpoint, intended primarily for testing purposes.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-jdbc</td><td>Apache Jena - JDBC Parent</td><td>pom</td><td>This is the parent module for the Jena JDBC modules.  These modules provide JDBC Type 4 drivers for in-memory and TDB datasets as well as remote SPARQL endpoints.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-jdbc-driver-remote</td><td>Apache Jena - JDBC Remote Endpoint Driver</td><td/><td>A Jena JDBC driver for use with remote SPARQL endpoints.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-jdbc-driver-tdb</td><td>Apache Jena - JDBC TDB Driver</td><td/><td>A Jena JDBC driver for use with the Jena TDB backend</td></tr>
<tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>apache-jena-libs</td><td>Apache Jena - Libraries POM</td><td>pom</td><td>A convenience POM artifact that may be referenced to pull in all the standard Jena Libraries (Core, ARQ, IRI, and TDB) with a single dependency.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-maven-tools</td><td>Apache Jena - Maven Plugins, including schemagen</td><td>maven-plugin</td><td>Plugins for Apache Maven to perform source management activities,                such as generating Java files from RDF vocabulary sources using                Jena's schemagen tool</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>apache-jena-osgi</td><td>Apache Jena - OSGi</td><td>pom</td><td>Apache Jena OSGi distribution and test</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-osgi</td><td>Apache Jena - OSGi bundle</td><td>bundle</td><td>     Embedding the main Jena modules (iri/core/arq/tdb) in a single OSGi bundle.   </td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-osgi-test</td><td>Apache Jena - OSGi integration tests</td><td>bundle</td><td>Tests for jena-osgi as a bundle</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-sdb</td><td>Apache Jena - SDB (SQL based triple store)</td><td>jar</td><td>SDB is a persistence layer for use with Apache Jena that uses an SQL database to store triples/quads.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-security</td><td>Apache Jena - Security</td><td/><td>Security (Permissions) wrapper around Jena RDF implementation.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-spatial</td><td>Apache Jena - SPARQL Spatial Search</td><td>jar</td><td/></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-text</td><td>Apache Jena - SPARQL Text Search</td><td>jar</td><td/></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>jena-tdb</td><td>Apache Jena - TDB (Native Triple Store)</td><td>jar</td><td>TDB is a storage subsystem for Jena and ARQ, it is a native triple store providing persisent disk based storage of triples/quads.</td></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>schemagen-demo</td><td>schemagen-test</td><td>jar</td><td/></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>schemagen-test</td><td>schemagen-test</td><td>jar</td><td/></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>schemagen-test</td><td>schemagen-test</td><td>jar</td><td/></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>schemagen-test</td><td>schemagen-test</td><td>jar</td><td/></tr>
  <tr xmlns:pom="http://maven.apache.org/POM/4.0.0"><td>schemagen-test</td><td>schemagen-test</td><td>jar</td><td/></tr>

<!-- END OF ARTIFACT LIST -->
</table>


These artifacts are used to deliver Jena:

* apache-jena - the binary distribution
* apache-jena-libs - a POM to include main <i>jena-...</i> artifacts 

You can run <code>mvn dependency:tree</code> to print the dependency
tree. 

### Specifying dependencies on SNAPSHOTs

If you want to depend on Jena development snapshots, e.g. to get access
to recent bug fixes, you should add the following to your <code>pom.xml</code>:

      <repository>
        <id>apache-repo-snapshots</id>
        <url>https://repository.apache.org/content/repositories/snapshots/</url>
        <releases>
          <enabled>false</enabled>
        </releases>
        <snapshots>
          <enabled>true</enabled>
        </snapshots>
      </repository>

### Build and install artifacts in your local Maven repository

If you want you can checkout the Jena sources, build the artifacts and
install them in your local Maven repository, then you simply checkout the source 
tree and build with maven 
<code>mvn install</code>. This assumes you have Maven and Git installed:

    git://git.apache.org/jena.git
    cd jena
    mvn clean install

Each of the modules can be built on it's own but they
require the current snapshots and Jena parent POM to be installed.
